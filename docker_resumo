Roteiro para utilizar o Docker

Trabalhando com Container:

-abaixa ao container do Git Hub e inicia na sua maquina e finaliza
docker run hello-world
-mostra ccontainers em execucao
docker ps    
-mostra imagens na maquina
docker images 
mostra os containers que estao na maquina e parados
docker ps -a
- Abaixar a imagem do Unbuntu
docker run unbuntu
-Parametro run -ti : habilita um terminal e permite interacao com o container:
docker run -ti unbuntu /bin/bash
ip addr 
Para sair do container e deixar ele em execucao:
CTRL PQ
Para sair matando o cntainer:
CTRL Q
ou docker stop <cID>
parametro -d  , faz o container rodar como daemon em background, sem terminal
docker run -d unbuntu /bin/bash
Para voltar ao container que vc saiu usar o ID, pegar o ID com docker ps
docker attach <containerID>
Para iniciar um container que esta parado, listar com docker ps -a e em seguida:
docker start <cID>
Pausando um container, verificar com docker ps e em seguida:
docker pause <cID)
Descongelando o docker pausado:
docker  unpause <cID>

Para ver os recursos que o container utiliza:
docker stats <cID>

Para ver os recursos que consomem dentro do container:
docker top <cID>

Para ver os LOGS:
docker logs <cID>

Deletando um container em execucao. Um parado nao precisa do -f:
docker rm -f <cID>

Comandos avançados com container

Passando um nome para o container, um Alias. NEsse caso , testeunb
docker run -ti -name testeunb unbuntu /bin/bash

ADMINISTRANDO CONTAINER:

Estando conectado no terminal de um container, digite o comando:
docker inspect
para ver detalhes apenas da memoria:
docker inspect | grep -i mem

Caso nao esteja conectado ao container, utilize o Container ID (cID)
docker inspect <cID> 


Habilitando Tresholds de Memoria ao Container:
docker run -ti --memory 726m -name testeunb2 unbuntu /bin/bash

Para atualizar a memoria de um Container je em utilizacao:

docker update  --memory 512m -name testeunb2

Verificando:
docker inspect testeunb2 | grep -i mem

Habilitando Tresholds de CPU ao Container:
docker run -ti --cpu-shares 1024 --name cpu1 debian
docker run -ti --cpu-shares 512 --name cpu2 debian
docker run -ti --cpu-shares 512 --name cpu3 debian

Verificando a memoria atribuida:
docker inspect cpu1 | grep -i cpu
docker inspect cpu2 cpu3 | grep -i cpu

aumentando o cpu2:

docker update --cpu2 --cpu-shares 1024 cpu2

VOLUMES e Containers DATA-ONLY

subindo um container apontando um volume:

docker run -ti -v /volume  unbuntu /bin/bash

Lista o hash e o diretorio no Host docker (SO)

docker inspect -f {{.Mounts}} <cID>

Subindo um volume, apontando para um diretorio especifico:

mkdir /root/primeiro_docker_file

docker run -ti -v /root/primeiro_docker_file:/volume  debian

obs: /volume é a area montada dentro do container

Criando um container DATA ONLY que vai podesr ser compartilhado entre vaios containers
1) criar o container
docker create -v /data --name dbdados centos
2)Criar dois containers importando o volume anterior:
docker run -d -p 5432:5432 --name pgsql1 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESSQL_DB=docker kamui/postgresql

docker run -d -p 5433:5432 --name pgsql2 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESSQL_DB=docker kamui/postgresql
obs: -p porta_host:porta_container

docker inspect -f {{.Mounts}} dbdados

conferir o volume criado com df -h

Trabalhando com DOCKERFILE


cd /root/primeiro_dockerfile
vi Dockerfile
editar o arquivo:
FROM DEBIAN
RUN /bin/echo "DockerDucks NOW&FOREVER"

Criar a imagem baseada no dockerfile:

docker build .

docker images

docker build -t primeira_imagem :1.0 .

docker images

13-Criando Imagens de container Docker 
mkdir /root/dockerfiles/apache
vi Dockerfile
FROM debian
run apt-get update && apt-get install -y apache2 && apt-get clean
ENV APACHE_LOCK_DIR="/var/lock"
ENV APACHE_PID_FILE="/var/run/apache2.pid"
ENV APACHE_RUN_USER="www-data"
ENV APACHE_RUN_GROUP="www-data"
ENV APACHE_LOG_DIR="/var/log/apache2/"
LABEL Description="Webserver"
VOLUME /var/www/html
EXPOSE 80
ENTRYPOINT /etc/init.d/apache2 start && /bin/bash

docker build -t webserver:1.0 .

docker images


Criar o container usando a imagem webserver:

docker run -ti webserver:1.0
/etc/init.d/apache2 start

nestat ou ss-a (ver portas ativas

ip addr para ver a porta

ip addr e ver o IP (dentro do container)
telnet ip:80   (fora do container)

ou curl ip:80





)



RESUMO COMANDOS:
Segue a lista de comandos docker e sua utilidade:

docker attach  – Acessar dentro do container e trabalhar a partir dele.
docker build   – A partir de instruções de um arquivo Dockerfile eu possa criar uma imagem.
docker commit  – Cria uma imagem a partir de um container.
docker cp      – Copia arquivos ou diretórios do container para o host.
docker create  – Cria um novo container.
docker diff    – Exibe as alterações feitas no filesystem do container.
docker events  – Exibe os eventos do container em tempo real.
docker exec    – Executa uma instrução dentro do container que está rodando sem precisar atachar nele.
docker export  – Exporta um container para um arquivo .tar.
docker history – Exibe o histórico de comandos que foram executados dentro do container.
docker images  – Lista as imagens disponíveis no host.
docker import  – Importa uma imagem .tar para o host.
docker info    – Exibe as informações sobre o host.
docker inspect – Exibe r o json com todas as configurações do container, como IP, porta, limite de memoria, CPU
docker kill    – Da Poweroff no container.
docker load    – Carrega a imagem de um arquivo .tar.
docker login   – Registra ou faz o login em um servidor de registry.
docker logout  – Faz o logout de um servidor de registry.
docker logs    – Exibe os logs de um container.
docker port    – Abre uma porta do host e do container.
docker network – Gerenciamento das redes do Docker.
docker node    – Gerenciamento dos nodes do Docker Swarm.
docker pause   – Pausa o container.
docker port    – Lista as portas mapeadas de um container.
docker ps      – Lista todos os containers.
docker pull    – Faz o pull de uma imagem a partir de um servidor de registry.
docker push    – Faz o push de uma imagem a partir de um servidor de registry.
docker rename  – Renomeia um container existente.
docker restart – Restarta um container que está rodando ou parado.
docker rm      – Remove um ou mais containeres.
docker rmi     – Remove uma ou mais imagens.
docker run     – Executa um comando em um novo container.
docker save    – Salva a imagem em um arquivo .tar.
docker search  – Procura por uma imagem no Docker Hub.
docker service – Gernciamento dos serviços do Docker.
docker start   – Inicia um container que esteja parado.
docker stats   – Exibe informações de uso de CPU, memória e rede.
docker stop    – Para um container que esteja rodando.
docker swarm   – Clusterização das aplicações em uma orquestração de várias containers, aplicações junto.
docker tag     – Coloca tag em uma imagem para o repositorio.
docker top     – Exibe os processos rodando em um container.
docker unpause – Inicia um container que está em pause.
docker update  – Atualiza a configuração de um ou mais containers.
docker version – Exibe as versões de API, Client e Server do host.
docker volume  – Gerenciamento dos volumes no Docker.
docker wait    – Aguarda o retorno da execução de um container para iniciar esse container.

Obs.: É possível ver todos os comandos que o Docker possui, tendo o docker instalado, basta digitar no terminal docker --help
